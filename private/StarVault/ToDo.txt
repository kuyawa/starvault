TODO:

? StellarSDK: Make txBuilder+paymentOp+operationBody public, rebuild

- app icons

setup:
- scan account

sign:
- scan tx
- sign tx
- show signed tx

scanner:
- show go back button, move to front
- copy ideas from SoBarcodeReader or qrcodereaderswift to use previewlayer
- use beep when qrcode found


// ref: https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0007.md
web+stellar:pay?destination=GALT5...&amount=10&asset_code=GALT&asset_issuer=GBANK...&memo=hello
web+stellar:tx?xdr=ABCD...

The parameters for the pay operation are as follows:

destination (required) - A valid account ID or payment address
amount (optional) - Amount that destination will receive. If not specified then the wallet should ask the user to enter the amount before signing. The use case for leaving this out is to support donations of arbitrary amounts.
asset_code (optional) - Asset code (XLM if not present) destination will receive
asset_issuer (optional) - Account ID of asset issuer (XLM if not present) destination will receive
memo (optional) - Can be a memo to be included in the payment / path payment. Memos of type MEMO_HASH and MEMO_RETURN should be base64 encoded and then URL encoded. Memos of type MEMO_TEXT should be URL-encoded.
memo_type (optional) - One of MEMO_TEXT, MEMO_ID, MEMO_HASH, MEMO_RETURN. See transaction guide for a description of these values.
callback (optional) - If this value is omitted then the URI handler should sign the given XDR and submit it to the network. If the value is present then it should be interpreted as a URL-encoded callback. The URL-encoded callback will start with a prefix to denote whether this is a url callback or some other form of callback. In the case where it is a url callback (denoted by url:, i.e. url%3A after encoding) the URI handler should send the signed XDR to this url in a POST request with Content-Type set to application/x-www-form-urlencoded with the data fields xdr containing the signed XDR (URL-encoded). If there are any query params specified in the URL callback then those should be included in the URL when submitting. For now only url callback types are supported.
msg (optional) - There can be an optional msg query param to indicate any additional information that the website or application wants to show the user in her wallet. The value for this query param should be URL-encoded as well and should not be longer than 300 characters before the URL-encoding. Note that the msg field is different from the memo field that is included in a transaction. The msg field will not be put on-chain, but the memo field will be put on-chain.
network_passphrase (optional) - Only need to set if this transaction is for a network other than the public network (URL-encoded).
origin_domain (optional) - A fully qualified domain name that specifies the originating domain of the URI request. Wallets must validate the URI request against the included signature before they display the origin_domain to the user. See the Request Signing section for more details.
signature (optional) - A signature of the hash of the URI request (excluding the signature field and value itself). Wallets should use the URI_REQUEST_SIGNING_KEY specified in the domain's stellar.toml file to validate this signature. If the verification fails, wallets must alert the user. See the Request Signing section for more details.

How about sequence? Pass from wallet in sep007?

- Build transaction from tx base64, implement in StellarSDK
- Check JS sdk Transaction object for details:

> kp = StellarSdk.Keypair.fromSecret(secretKey);
> tx = new StellarSDK.Transaction(base64tx)
< {tx: e, source: "GCBFBRFSWDAUOB5BTNHAWBIWTX5QWDEMKRGUBVVFQVT46THNUTIOSIDM", fee: 100, _memo: e, sequence: "0", â€¦}
> sg = tx.sign(kp)
> ev = sg.toEnvelope()
< {_attributes: Object, tx: function, signatures: function, toXDR: function}
> xdr = ev.toXDR('base64')
> show xdr as qrcode
